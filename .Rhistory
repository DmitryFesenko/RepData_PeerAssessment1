p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgd
info(rgd)
info("rgd)
""
)
info("rgd")
info("rgd")
?rgd
??rgd
?rgb
p3 <- colorRampPalette(c("blue", "green"))
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgd(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
?rgb
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("points", "smooth"))
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boplot", color = manufacturer)
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, color = drv)
qplot(hwy, displ, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
quit()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = 1 ~ drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
(g + geom_point()) + geom_smooth()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
quit()
library(swirl)
swirl()
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(size = 2, alpha = 1/2, aes(color = drv)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line(aes(ylim(-3,3))
)
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
quit()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
0
quit(swirl)
library(swirl)
swirl()
str(diamonds)
quit()
library(swirl)
swirl()
qplot(price, data = diamonds)
range(diamond$price)
range(diamonds$price)
qplor(price, data = diamonds, binwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(aplha = 1/3) + facets_grid(cut~car2)
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth(method = 'lm', size = 3, color = "pink")
ggplot(aes(depth, price)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds, aes(depth, price)) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
rm(ls = list())
rm(list = ls())
quit()
library(nlme)
library(lattice)
xyplot(weight~Time|Diet, BodyWeight)
library(datasets)
data("airquality")
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
5
abline(h = 0.5, col = "yellow")
12
abline(h = 0.05, col = "green")
library(swirl)
swirl()
swirl()
4
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swirl()
cmat
plot(cx, cy, color = c("red", "orange", "purple", pch = 3, cex = 2, lwd = 2))
plot(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, which.min)
apply(distTmp, mean, which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
newClust
tapply(x, newCLust, mean)
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
midst(x, y, newCx, newCy)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newCLust2, mean)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex  = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col  = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col  = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col  = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
library(swirl)
swirl()
mat
svd(mat)
matu%*%diag%*%matv
matu%*%diag%*%t
(matu%*%diag)%*%matv
library(swirl)
swirl()
matu + diag + matv
diag %*% matu
matu %*% diag %*% t(matv)
svd(scale(mat))
mat
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
(svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v[,1])
svd1$u[,1] %*% svd1$d[1]) %*% svd1$v[,1]
svd1$u[,1] %*% svd1$d[1] %*% svd1$v[,1]
svd1$u[,1] %*% svd1$d[1]
svd1$u %*% svd1$d
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
a2 <- svd1$u[, 1:2] %*% t(svd1$v[,1:2]) * svd1$d[2]
a2 <- svd1$u[, 1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[1:2])
a2 <- svd1$u[, 1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[, 1:2])
myImage(a2)
a2 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5])
myImage(svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5]))
myImage(svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10]))
dim(ssd)
names(ssd[, 562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
dist(sub1[, 1:3])
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering(mdist)
hclustering <- hclust(mdist)
hclustering
plot(hclustering)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
dim(svd$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[, c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562,563)])
kClust <- kmeans(sub1[, -c(562,563)], centers = 6)
kClust
table(kCLust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(KClust$centers)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 3])
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kCLust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
quit()
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
names(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
library(swirl)
swirl()
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = T)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
x1 < 0
negative <- x1 < 0
sum(negative, na.rm - TRUE)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, Country.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub), na.rm = TRUE, lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1999,52), mrg[,2], rep(2012, 52), mrg[,3])
segments(rep(1,52), mrg[,2], rep(2, 52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
quit()
install.packages("tidyverse")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("readr")
install.packages("rvest")
install.packages("viridis")
html.human_capital <- read_html("http://reports.weforum.org/human-capital-report-2016/rankings/")
library(tidyverse)
install.packages("haven")
library(tidyverse)
library(stringr)
library(readr)
library(rvset)
library(rvest)
library(viridis)
html.human_capital <- read_html("http://reports.weforum.org/human-capital-report-2016/rankings/")
html.human_capital
df.human_capital <- html.human_capital %>%
html_node("table") %>%
html_table()
library(stringr)
library(tidyverse)
install.packages(""stringr"")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
df.human_capital <- html.human_capital %>%
html_node("table") %>%
html_table()
install.packages(c("chron", "data.table", "digest", "jsonlite", "openssl", "Rcpp", "RSQLite", "tidyr"))
install.packages(c("chron", "data.table", "digest", "jsonlite", "openssl", "Rcpp", "RSQLite", "tidyr"))
install.packages(c("chron", "data.table", "digest", "jsonlite", "openssl", "Rcpp", "RSQLite", "tidyr"))
install.packages(c("chron", "data.table", "digest", "jsonlite", "openssl", "Rcpp", "RSQLite", "tidyr"))
install.packages(c("chron", "data.table", "digest", "jsonlite", "openssl", "Rcpp", "RSQLite", "tidyr"))
installed.packages(lib.loc = NULL, priority = NULL,
noCache = FALSE, fields = NULL,
subarch = .Platform$r_arch)
df.human_capital <- html.human_capital %>%
html_node("table") %>%
html_table()
library(dplyr)
df.human_capital <- html.human_capital %>%
html_node("table") %>%
html_table()
library(rvest)
df.human_capital <- html.human_capital %>%
html_node("table") %>%
html_table()
setwd("E:/My folder/Work/Data science/GIT/RepData_PeerAssessment1")
library(dplyr)
library(ggplot2)
activity <- read.csv("activity.csv", stringsAsFactors = F)
activity <- tbl_df(activity)
total_day <- activity %>% group_by(date) %>% summarize(total_steps = sum(steps))
ggplot(total_day, aes(total_steps)) + geom_histogram(binwidth = 0.3)
ggplot(total_day, aes(total_steps)) + geom_histogram()
ggplot(total_day, aes(total_steps)) + geom_histogram(binwidth = 0.7)
ggplot(total_day, aes(total_steps)) + geom_histogram()
ggplot(total_day, aes(total_steps)) + geom_histogram() + stat_bin(bins = 60)
ggplot(total_day, aes(total_steps)) + geom_histogram() + stat_bin(bins = 52)
ggplot(total_day, aes(total_steps)) + geom_histogram() + stat_bin(bins = 60)
ggplot(total_day, aes(total_steps)) + geom_histogram()
ggplot(total_day, aes(total_steps)) + geom_histogram(bins = 100)
ggplot(total_day, aes(total_steps)) + geom_histogram(bins = 60)
ggplot(total_day, aes(total_steps)) + geom_histogram(bins = 50)
ggplot(total_day, aes(total_steps)) + geom_histogram()
totalSteps<-aggregate(steps~date,data=activity,sum,na.rm=TRUE)
View(totalSteps)
hist(totalSteps$steps)
hist(total_day$total_steps, na.rm = T)
hist(total_day$total_steps)
hist(total_day$total_steps)
ggplot(total_day, aes(total_day$total_steps)) + geom_histogram()
hist(total_day$total_steps)
ggplot(total_day, aes(total_day$total_steps)) + geom_histogram()
barplot(total_day$total_steps, names.arg=total_day$date, xlab="date", ylab="steps")
str(total_day)
total_day$date <- as.Date(total_day$date)
str(total_day)
ggplot(total_day, aes(x = date, y = total_steps)) + geom_line()
ggplot(total_day, aes(x = date, y = total_steps)) + geom_point()
steps.interval <- aggregate(steps ~ interval, data=activity, FUN=mean)
View(steps.interval)
plot(steps.interval, type="l")
View(steps.interval)
mean.steps <- activity %>% group_by(interval) %>% summarize(average_steps = mean(steps))
View(mean.steps)
mean.steps <- activity %>% filter(!is.na(steps)) %>% group_by(interval) %>% summarize(average_steps = mean(steps))
View(mean.steps)
View(steps.interval)
max(mean.steps$average_steps)
max.interval <- mean.steps %>% filter(average_steps == max(average_steps))
dim(max.interval)
View(max.interval)
max.interval <- mean.steps[mean.steps$average_steps == max(mean.steps$average_steps)]
mean.steps$average_steps[which.max(mean.steps$average_steps)]
mean.steps$interval[which.max(mean.steps$average_steps)]
nrow(activity[is.na(activity$steps),])
sum(is.na(activity$steps))
sum(is.na(acivity))
sum(is.na(activity))
summary(activity)
summary(activity$steps)
summary(mean.steps)
View(mean.steps)
mean.steps <- activity %>% filter(!is.na(steps)) %>% group_by(interval) %>% summarize(steps = mean(steps))
View(mean.steps)
mean.steps <- activity %>% filter(!is.na(steps)) %>% group_by(interval) %>% summarize(average_steps = mean(steps))
activity.filled <- activity %>%
left_join(mean.steps) %>%
mutate(interval = ifelse(is.na(interval), average_steps, steps))
View(activity.filled)
mean.steps <- activity %>% filter(!is.na(steps)) %>% group_by(interval) %>% summarize(average_steps = mean(steps))
activity.filled <- activity %>%
left_join(mean.steps) %>%
mutate(interval = ifelse(is.na(interval), average_steps, steps)) %>%
select(-average_steps)
View(activity.filled)
activity.filled <- activity %>%
left_join(mean.steps, by = "steps") %>%
mutate(interval = ifelse(is.na(interval), average_steps, steps)) %>%
select(-average_steps)
activity.filled <- activity %>%
left_join(mean.steps, by = c("interval", "steps")) %>%
mutate(interval = ifelse(is.na(interval), average_steps, steps)) %>%
select(-average_steps)
activity.filled <- activity %>%
left_join(mean.steps, by = "interval")
activity.filled <- activity %>%
left_join(mean.steps, by = "interval") %>%
mutate(interval = ifelse(is.na(steps), average_steps, steps)) %>%
select(-average_steps)
activity.filled <- activity %>%
left_join(mean.steps, by = "interval") %>%
mutate(steps = ifelse(is.na(steps), average_steps, steps)) %>%
select(-average_steps)
nrow(activity)
nrow(activity.filled)
